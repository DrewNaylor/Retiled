<!-- RetiledStart - Windows Phone 8.x-like Start screen UI for the
                    Retiled project.
Copyright (C) 2021 Drew Naylor
(Note that the copyright years include the years left out by the hyphen.)
Windows Phone and all other related copyrights and trademarks are property
of Microsoft Corporation. All rights reserved.

This file is a part of the Retiled project.
Neither Retiled nor Drew Naylor are associated with Microsoft
and Microsoft does not endorse Retiled.
Any other copyrights and trademarks belong to their
respective people and companies/organizations.


  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License. -->




<UserControl xmlns="https://github.com/avaloniaui"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
			 xmlns:staggeredlayout="clr-namespace:StaggeredLayout.Avalonia;assembly=StaggeredLayout.Avalonia"
             mc:Ignorable="d" d:DesignWidth="360" d:DesignHeight="720"
             x:Class="RetiledStart.Views.TilesView">
	<!-- In order to pull in controls from libraries, you need to add the "...;assembly=..." part to the xmlns. -->


	<ScrollViewer Margin="0" ScrollViewer.VerticalScrollBarVisibility="Hidden">
		
		<Grid RowDefinitions="*,40">

			<!-- This StackPanel contains both an empty panel for spacing at the top
			as well as a WrapPanel containing the tiles. -->
			<StackPanel Grid.Row="0" HorizontalAlignment="Center" VerticalAlignment="Top">
				
				<!-- Adding an empty panel above the WrapPanel will make the top of the Start screen more like WP.
				Based on pixel measurements, the gap should be a height of 37 WPF units (42 pixels)
				from the top of the display to the tiles when at the top of the Start screen to match WP.
				My source was a WP8.1 Update 1 720p emulator at 50% scale. -->
				<Panel Height="37"/>
				
			<WrapPanel HorizontalAlignment="Center">

				<!-- Tile sizes according to Microsoft, a lot of manual
				testing done by me, and various other pages are as follows:
				
				Two-column view:
				Small tiles: 70x70
			    Medium tiles: 150x150
			    Wide tiles: 310x150
				
				Three-column view:
				Small tiles: 45x45
			    Medium tiles: 100x100
			    Wide tiles: 210x100
			 
			    Margins are 10 pixels between tiles,
			    or 5 pixels on each side of a tile for a nice grid.
			    This margin also extends to the edge of the display on
			    the left and right. However, there's another margin
	   		    above the tiles, which can be changed by modifying the
			    WrapPanel's margin.
				
				MSDN page with tile sizes for WP8:
				https://docs.microsoft.com/en-us/previous-versions/windows/apps/hh781198(v=win.10)?redirectedfrom=MSDN 
				Please note that the official small tile size for WP8
				is 71x71. Not sure exactly how it ends up lining up with
				other tiles, but I'm just going to use the Windows 8 size,
				which is 70x70. -->
				
				<!-- IMPORTANT NOTE: Even though the tiles don't look right,
				bringing the view into the main window applies the styles
				and text binding properly.
				For some reason, the Immediate Window says this when
				ending the debugging session:
				[Binding] Error in binding to 'Avalonia.Controls.Button'.'Command': 'Null value in expression '$parent[Window, 0]'.' (Button #7284614)-->
				
				<!-- IMPORTANT NOTE 2: Tiles have to have their margin set here
				rather than in the style, because otherwise it won't apply correctly. -->
				
				<!-- Found an interesting question on SO which is kinda trying to do what I'm doing with the tile layout:
				https://stackoverflow.com/questions/13102716/is-there-a-way-to-display-items-of-varying-width-in-wpf-wrappanel
				StaggeredPanel looks like it may be what I need, but not sure yet:
				https://docs.microsoft.com/en-us/windows/communitytoolkit/controls/staggeredpanel
				Here's a StaggeredLayout that looks like a StaggeredPanel but has ItemsRepeater support. May need to port it to Avalonia.
				https://github.com/DL444/DL444.StaggeredLayout
				I'm working on porting that library to Avalonia, though at the moment I'm not sure how to handle the OnLayoutPropertyChanged events.
				
				IMPORTANT NOTE 3: When implementing the StaggeredLayout control, I need to make sure the StaggeredLayout 
				is wrapped in an ItemsRepeater.Layout, like the example below from the WinUI Sample App:
				<ScrollViewer>
					<winui:ItemsRepeater x:Name="StaggeredRepeater" ItemTemplate="{StaticResource StaggeredTemplate}">
						<winui:ItemsRepeater.Layout>
							<controls:StaggeredLayout DesiredColumnWidth="250" ColumnSpacing="5" RowSpacing="5"/>
						</winui:ItemsRepeater.Layout>
					</winui:ItemsRepeater>
				</ScrollViewer> -->
					
				<!-- Set up the ItemsRepeater. -->
				<ItemsRepeater Items="{Binding GetTilesList}"
						 Background="Black"
						 HorizontalAlignment="Left" VerticalAlignment="Top" Width="{Binding $parent[Window].Width}">
					<ItemsRepeater.Layout>
						<StackLayout Spacing="0" Orientation="Vertical"/>
					</ItemsRepeater.Layout>
					<ItemsRepeater.ItemTemplate>
						<DataTemplate>
							<!-- Binding to a command in an ItemsRepeater DataTemplate requires adding
					  "$parent[ItemsRepeater].DataContext."	before your command you want to bind to.
					  Found this SO answer which helped: https://stackoverflow.com/a/66838883 -->
							<Button Command="{Binding $parent[ItemsRepeater].DataContext.RunApp}" CommandParameter="{Binding}"
									Padding="0,5" Classes="RetiledAllAppsEntry_Button" Height="60" HorizontalAlignment="Stretch">
								<!-- HorizontalAlignment="Stretch" ensures you can click or tap on the buttons
						  from anyware, rather than just on the text. -->
								<StackPanel Height="55" Margin="0,5" Classes="RetiledAllAppsEntry_StackPanel" Orientation="Horizontal" Spacing="10">
									<Rectangle Classes="RetiledAllAppsEntry_Rectangle" Height="50" Width="50"/>
									<!-- MSDN says App List icons are 44x44 with 6x6 pixels of padding:
							  https://docs.microsoft.com/en-us/previous-versions/windows/apps/hh781198(v=win.10)?redirectedfrom=MSDN -->
									<TextBlock Classes="RetiledAllAppsEntry_TextBlock"
											   TextTrimming="CharacterEllipsis" FontSize="20"
											   Text="{Binding Converter={StaticResource AppListItemTextConverter}}">
										<!-- Figuring this out was a mess, but this SO answer ended
								  up being super helpful:
								  https://stackoverflow.com/a/39869384 -->
									</TextBlock>
									<!-- A converter is necessary to get the text from the file. 
							  https://stackoverflow.com/a/11104834
							  https://docs.microsoft.com/en-us/windows/winui/api/microsoft.ui.xaml.data.ivalueconverter?view=winui-3.0 -->
								</StackPanel>
							</Button>
						</DataTemplate>
					</ItemsRepeater.ItemTemplate>
				</ItemsRepeater>
				
				<!-- Medium tiles: --><!--
				<Button Classes="StartTile" Content="{Binding $parent[Window].DataContext.Greeting}" Width="150" Height="150" Margin="5"/>
				<Button Classes="StartTile" Content="{Binding $parent[Window].DataContext.Greeting}" Width="150" Height="150" Margin="5"/>
				<Button Classes="StartTile" Content="{Binding $parent[Window].DataContext.Greeting}" Width="150" Height="150" Margin="5"/>
				<Button Classes="StartTile" Content="{Binding $parent[Window].DataContext.Greeting}" Width="150" Height="150" Margin="5"/>
				<Button Classes="StartTile" Content="{Binding $parent[Window].DataContext.Greeting}" Width="150" Height="150" Margin="5"/>
				<Button Classes="StartTile" Content="{Binding $parent[Window].DataContext.Greeting}" Width="150" Height="150" Margin="5"/>
				
				--><!-- Wide tile: --><!--
				<Button Classes="StartTile" Content="{Binding $parent[Window].DataContext.Greeting}" Width="310" Height="150" Margin="5"/>
				
				--><!-- More medium tiles: --><!--
				<Button Classes="StartTile" Content="{Binding $parent[Window].DataContext.Greeting}" Width="150" Height="150" Margin="5"/>
				<Button Classes="StartTile" Content="{Binding $parent[Window].DataContext.Greeting}" Width="150" Height="150" Margin="5"/>
				<Button Classes="StartTile" Content="{Binding $parent[Window].DataContext.Greeting}" Width="150" Height="150" Margin="5"/>
				<Button Classes="StartTile" Content="{Binding $parent[Window].DataContext.Greeting}" Width="150" Height="150" Margin="5"/>
				
				--><!-- Small tiles: --><!--
				<Button Classes="StartTile" Content="{Binding $parent[Window].DataContext.Greeting}" Width="70" Height="70" Margin="5"/>
				<Button Classes="StartTile" Content="{Binding $parent[Window].DataContext.Greeting}" Width="70" Height="70" Margin="5"/>
				<Button Classes="StartTile" Content="{Binding $parent[Window].DataContext.Greeting}" Width="70" Height="70" Margin="5"/>
				<Button Classes="StartTile" Content="{Binding $parent[Window].DataContext.Greeting}" Width="70" Height="70" Margin="5"/>
				<Button Classes="StartTile" Content="{Binding $parent[Window].DataContext.Greeting}" Width="70" Height="70" Margin="5"/>
				<Button Classes="StartTile" Content="{Binding $parent[Window].DataContext.Greeting}" Width="70" Height="70" Margin="5"/>
				<Button Classes="StartTile" Content="{Binding $parent[Window].DataContext.Greeting}" Width="70" Height="70" Margin="5"/>
				<Button Classes="StartTile" Content="{Binding $parent[Window].DataContext.Greeting}" Width="70" Height="70" Margin="5"/>
				
				--><!-- More medium tiles: --><!--
				<Button Classes="StartTile" Content="{Binding $parent[Window].DataContext.Greeting}" Width="150" Height="150" Margin="5"/>
				<Button Classes="StartTile" Content="{Binding $parent[Window].DataContext.Greeting}" Width="150" Height="150" Margin="5"/>
				<Button Classes="StartTile" Content="{Binding $parent[Window].DataContext.Greeting}" Width="150" Height="150" Margin="5"/>
				<Button Classes="StartTile" Content="{Binding $parent[Window].DataContext.Greeting}" Width="150" Height="150" Margin="5"/>
				<Button Classes="StartTile" Content="{Binding $parent[Window].DataContext.Greeting}" Width="150" Height="150" Margin="5"/>
				<Button Classes="StartTile" Content="{Binding $parent[Window].DataContext.Greeting}" Width="150" Height="150" Margin="5"/>
				<Button Classes="StartTile" Content="{Binding $parent[Window].DataContext.Greeting}" Width="150" Height="150" Margin="5"/>-->

			</WrapPanel>
				</StackPanel>
			<Button Classes="RetiledRoundButton-WhiteBackgroundOnPress" Height="30" Width="30" Content="->" Grid.Row="1"
					HorizontalAlignment="Right"
					Margin="0,10,20,20"
					FontSize="20"
					Command="{Binding $parent[Window].DataContext.ShowAllAppsList}"/>
			<!-- The button may not look right here, but it will
			when it's pulled into the main window as the
			style in applied there.
			For the command, it's binding to the ShowAllAppsList thing
			in the MainWindowViewModel. -->
		</Grid>
	</ScrollViewer>
	
</UserControl>
