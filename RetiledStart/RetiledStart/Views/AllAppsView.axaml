<!-- RetiledStart - Windows Phone 8.x-like Start screen UI for the
                    Retiled project.
Copyright (C) 2021 Drew Naylor
(Note that the copyright years include the years left out by the hyphen.)
Windows Phone and all other related copyrights and trademarks are property
of Microsoft Corporation. All rights reserved.

This file is a part of the Retiled project.
Neither Retiled nor Drew Naylor are associated with Microsoft
and Microsoft does not endorse Retiled.
Any other copyrights and trademarks belong to their
respective people and companies/organizations.


  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License. -->




<UserControl xmlns="https://github.com/avaloniaui"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
			 xmlns:local="clr-namespace:RetiledStart.ViewModels;assembly=RetiledStart"
			 xmlns:appslist="clr-namespace:libRetiledStart;assembly=libRetiledStart"
             mc:Ignorable="d" d:DesignWidth="360" d:DesignHeight="720"
             x:Class="RetiledStart.Views.AllAppsView">
	<UserControl.Styles>
		<!-- Temporarily import styles so that there's an
		idea of what they look like. -->
		<StyleInclude Source="avares://RetiledStart/Styles/RoundButton.axaml" />
		<StyleInclude Source="avares://RetiledStart/Styles/RoundButtonWhiteBackgroundOnPress.axaml" />
	</UserControl.Styles>
	<UserControl.Resources>
		<!-- Using stuff on the UIElement.ContextRequested event from MSDN.
		Actually, maybe this code from Avalonia will be what I'll have to use:
		https://github.com/AvaloniaUI/Avalonia/blob/master/samples/ControlCatalog/Pages/ContextFlyoutPage.xaml.cs
		Also this, for XAML: https://github.com/AvaloniaUI/Avalonia/blob/master/samples/ControlCatalog/Pages/ContextFlyoutPage.xaml
		Actually, it turns out that the code there doesn't work on the PinePhone. Either I'll have to wait until Avalonia
		supports long-pressing to open context menus, or I'll have to go to something like QML.NET. Or I could always
		implement the necessary code into Avalonia, but I don't know how to do it. -->
	</UserControl.Resources>
  <Grid Margin="0" ColumnDefinitions="30,*">
	  
	 <StackPanel Margin="10,20,10,10">
		  <!-- Margin has to be in the StackPanel or it looks weird. -->
	    <Button Classes="RetiledRoundButton-WhiteBackgroundOnPress" HorizontalAlignment="Center"
			  VerticalAlignment="Top"
			  Grid.Column="0" Width="30" Height="30" Content="S">
		  <!-- Temporarily using "S" instead of a magnifying glass. -->
	    </Button>

	    <Button Classes="RetiledRoundButton-WhiteBackgroundOnPress" HorizontalAlignment="Center"
			  VerticalAlignment="Top"
			  Margin="10"
			  Grid.Column="0" Width="30" Height="30" Content="Bk"
			  Command="{Binding $parent[Window].DataContext.GoBackToTiles}">
		  <!-- Temporary Back button to easily go back to the tiles
		  until there's support for an actual navigation bar.
		  Using a left arrow isn't allowed in XAML, so it's just "Bk". -->
		  <!-- For some reason, the Margin has to be here as well,
		  otherwise spacing doesn't look right for both sidebar buttons. -->
	    </Button>
	 </StackPanel>

	  <ScrollViewer Grid.Column="1" VerticalScrollBarVisibility="Auto" HorizontalScrollBarVisibility="Disabled">
		  <!-- This StackPanel ensures the width of the ItemsRepeater is restricted so the
		  scrollbar will be visible when combined with binding the ItemsRepeater width to
		  the window's width. -->
		<StackPanel HorizontalAlignment="Left" VerticalAlignment="Top" Background="Black" Width="50">
			
			<!-- Adding an empty panel above the ItemsRepeater will make the top of the All Apps list more like WP. -->
			<Panel Height="15"/>
			
			<!-- Binding the ItemsRepeater width to the window's width makes sure the scrollbar
			is visible, as mentioned above. This is binding to Window rather than UserControl, and it
			seems to work just like it did before using an ItemsRepeater. -->
		   <ItemsRepeater Items="{Binding GetDotDesktopFiles}"
						 Background="Black"
						 HorizontalAlignment="Left" VerticalAlignment="Top" Width="{Binding $parent[Window].Width}">
			  <ItemsRepeater.Layout>
				  <StackLayout Spacing="0" Orientation="Vertical"/>
			  </ItemsRepeater.Layout>
		      <ItemsRepeater.ItemTemplate>
				  <DataTemplate DataType="appslist:DotDesktopEntryInAllAppsList">
					  <!-- Binding to a command in an ItemsRepeater DataTemplate requires adding
					  "$parent[ItemsRepeater].DataContext."	before your command you want to bind to.
					  Found this SO answer which helped: https://stackoverflow.com/a/66838883 -->
					  <Button Command="{Binding $parent[ItemsRepeater].DataContext.RunApp}" 
							  CommandParameter="{Binding FileNameProperty}"
							  Padding="0,5" Classes="RetiledAllAppsEntry_Button" Height="60" HorizontalAlignment="Stretch">
						  <!-- Not sure what I need for the Gestures.RightTapped to make it show the
						  context flyout on long-press on a touchscreen in X11. Thought it should just work. 
						  This might help:
						  https://github.com/AvaloniaUI/Avalonia/issues/2242 -->
						  <!-- HorizontalAlignment="Stretch" ensures you can click or tap on the buttons
						  from anyware, rather than just on the text. -->
						  <!-- Started trying to figure out contextflyout based on this page:
						  https://github.com/AvaloniaUI/Avalonia/issues/5172
						  Here's stuff on flyouts from MSDN: https://docs.microsoft.com/en-us/windows/apps/design/controls/menus 
						  Here's a thing on ContextFlyouts specifically on MSDN: https://docs.microsoft.com/en-us/windows/winui/api/microsoft.ui.xaml.uielement.contextflyout?view=winui-3.0
						  That link has code that changes stuff on the target item, so it should help for resizing tiles at runtime. -->
						  <!--<Button.ContextFlyout>
							  <Flyout Placement="BottomEdgeAlignedLeft" ShowMode="Standard">-->
								  <!-- Not sure if those settings do anything. -->
								  <!--<StackPanel>-->
									  <!-- TODO: Check if there's already a tile pinned for this
									  app and prevent the user from using the MenuItems if that's the case.
									  Not sure how to handle deep-linking tiles to make sure they're not counted
									  as the main tile for an app.
									  TODO 2: Figure out how to close the ContextFlyout after using an item.
									  TODO 3: This flyout isn't accurate, but I need something. Found something that
									  may help with the darkening: https://stackoverflow.com/questions/62194012/avalonia-ui-pop-up-overlay
									  TODO 4: I don't know how to make the menus show up on the PinePhone (and other
									  touchscreen devices) yet. "Holding" may be useful, but I don't know where
									  to put it: https://docs.microsoft.com/en-us/uwp/api/windows.ui.xaml.uielement.holding?view=winrt-20348
									  More details in Avalonia: https://github.com/AvaloniaUI/Avalonia/issues/6538
									  Actually, maybe something here might help: https://stackoverflow.com/questions/33051372/how-to-add-listbox-item-contextmenu-in-uwp 
									  That link mentions the RightTapped event.
									  Here's some stuff about RightTapped on MSDN: https://docs.microsoft.com/en-us/windows/winui/api/microsoft.ui.xaml.uielement.righttapped?view=winui-3.0
									  May be useful to look at this sample: https://docs.microsoft.com/en-us/samples/microsoft/windows-universal-samples/xamlcontextmenu/ 
									  Or maybe this one: https://docs.microsoft.com/en-us/samples/microsoft/windows-universal-samples/contextmenu/ 
									  Maybe this page will help: https://github.com/microsoft/Windows-universal-samples/blob/main/Samples/XamlContextMenu/shared/Scenario3.xaml -->
								    <!--<MenuItem Command="{Binding $parent[ItemsRepeater].DataContext.PinMediumTile}"
											  CommandParameter="{Binding FileNameProperty}"
											  Header="pin to start (medium)" />
									<MenuItem Command="{Binding $parent[ItemsRepeater].DataContext.PinWideTile}"
											  CommandParameter="{Binding FileNameProperty}"
											  Header="pin to start (wide)" />
									<MenuItem Command="{Binding $parent[ItemsRepeater].DataContext.PinSmallTile}"
											  CommandParameter="{Binding FileNameProperty}"
											  Header="pin to start (small)" />
								  </StackPanel>
								  </Flyout>-->
						  <!--</Button.ContextFlyout>-->
						  <StackPanel Height="55" Margin="0,5" Classes="RetiledAllAppsEntry_StackPanel" Orientation="Horizontal" Spacing="10">
							  <Rectangle Classes="RetiledAllAppsEntry_Rectangle" Height="50" Width="50"/>
							  <!-- MSDN says App List icons are 44x44 with 6x6 pixels of padding:
							  https://docs.microsoft.com/en-us/previous-versions/windows/apps/hh781198(v=win.10)?redirectedfrom=MSDN -->
							  <TextBlock Classes="RetiledAllAppsEntry_TextBlock" 
										 TextTrimming="CharacterEllipsis" FontSize="20"
										 Text="{Binding NameKeyValueProperty}">
								  <!-- Figuring this out was a mess, but this SO answer ended
								  up being super helpful:
								  https://stackoverflow.com/a/39869384 -->
							  </TextBlock>
							  <!-- A converter is necessary to get the text from the file. 
							  https://stackoverflow.com/a/11104834
							  https://docs.microsoft.com/en-us/windows/winui/api/microsoft.ui.xaml.data.ivalueconverter?view=winui-3.0
							  TODO: Figure out a way to not have to use a converter by just having the text
							  be bound to a property in a custom class like what's done with the tiles. -->
						  </StackPanel>
					  </Button>
				  </DataTemplate>
			  </ItemsRepeater.ItemTemplate>
		  </ItemsRepeater>
		</StackPanel>
	  </ScrollViewer>
  </Grid>
</UserControl>